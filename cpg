#!/usr/bin/env python

"""
cpg - an extended qchem input system

Cartesian Product Generator

Will some day be a part of the qcl suite
"""

import sys
import os

module_path = os.path.abspath(r'../')
sys.path.append(module_path)

import numpy as np
import re
import argparse
import math
import itertools

def get_arguments(args=None):
    parser = argparse.ArgumentParser(prog='Cartesian Product Generator',
                                     formatter_class=argparse.RawDescriptionHelpFormatter,
                                     usage= "cpg [options] inputfile",
                                     description = ''' %(prog)s
    Generates a cartesian product of different options given in a file
    and creates a unique input for each set of different options

    Provide options in a file with the following syntax:
    $(option1, option2, option3)

    Example:

    == File.in ==
    ...
    $(option1, option2)
    $(option3, option4)
    ...

    == Generated Outputs ==
    === File_inp/File.option1.option3.in ===
    ...
    option1
    option3
    ...
    === File_inp/File.option2.option3.in  ===
    ...
    option2
    option3
    ...
    === File_inp/File.option1.option4.in  ===
    ...
    option1
    option4
    ...
    === File_inp/File.option2.option4.in  ===
    ...
    option2
    option4
    ...
    '''
    )
    parser.add_argument('inputfile', help='Q-Chem input file name')
    opts = parser.parse_args(args)
    return opts

def get_commands(line, commands_list):
    regex_command = re.compile(r'\$\((.*)\)')
    match = re.search(regex_command, line)
    if match:
        command = match.group(0)
        command = command.replace('$(', '')
        command = command.replace(')', '')
        commands = command.rsplit(',')
        commands_list.append(commands)
    return commands_list


if __name__ == '__main__':

    # Get Arguments
    opts = get_arguments()
    work = os.getcwd()
    inp = opts.inputfile
    stub, ext  = os.path.splitext(inp)
    subdir = os.path.join(work, stub + '_inp')
    if not os.path.isfile(inp) :
        print "File", inp, "Not found"
        print "Try 'cpg --help'"
        exit(1)

    if not os.path.exists(subdir): os.makedirs(subdir)

    with open(inp, 'r') as handle:
        # Read in file
        lines = handle.readlines()
        # Search for inp commands
        commands_list = []
        for line in lines:
            commands_list = get_commands(line, commands_list)

    print "Recognized Commands:"
    for i in commands_list:
        print i
    NewList = []
    for element in itertools.product(*commands_list):
        NewList.append(element)


    for element in NewList:
        # Generate File Name
        # stub.[elements].ext
        name = stub
        for i in element:
            name += "." + str(i)
        name += ext
        name = name.replace(' ', '')
        print "Created File" , name
        file = open(os.path.join(subdir, name), 'w')

        # Generate output, replace lines with their options
        idx = 0
        for line in lines:
            regex_command = re.compile(r'\$\((.*)\)')
            match = re.search(regex_command, line)
            if match:
                newline = line.replace(match.group(0), element[idx])
                idx += 1
                file.write(newline)
            else:
                file.write(line)
        file.close()

