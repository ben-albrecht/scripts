#!/usr/bin/env python

"""
cpg - Cartesian Product Generator
For taking cartesian products of input files with varying parameters
"""

from __future__ import print_function

from os import path, getcwd, makedirs

import numpy as np
import re
import argparse
import itertools

def get_arguments(args=None):
    parser = argparse.ArgumentParser(prog='Cartesian Product Generator',
                                     formatter_class=argparse.RawDescriptionHelpFormatter,
                                     usage= 'cpg [options] inputfile',
                                     description = ''' %(prog)s
    Generates a cartesian product of different options given in a file
    and creates a unique input for each set of different options

    Provide options in a file with the following syntax:
    $(option1, option2, option3)

    Example:

    == File.in ==
    ...
    $(option1, option2)
    $(option3, option4)
    ...

    == Generated Outputs ==
    === File_inp/File.option1.option3.in ===
    ...
    option1
    option3
    ...
    === File_inp/File.option2.option3.in  ===
    ...
    option2
    option3
    ...
    === File_inp/File.option1.option4.in  ===
    ...
    option1
    option4
    ...
    === File_inp/File.option2.option4.in  ===
    ...
    option2
    option4
    ...
    '''
    )
    parser.add_argument('inputfile',
        help='Inputfile name with $() markers')
    parser.add_argument(
        '--markers',
        type=restricted_string,
        default='$()',
        help='Marker style, first 2 characters are START of commands list,\
              3rd character is END of commands list')
    parser.add_argument('--delimiter',
        type=str,
        default='.',
        help='Output filename delimiter style')

    opts = parser.parse_args(args)
    return opts


def restricted_string(string):
    """String must be 3 unique characters"""
    if len(set(string)) == 3:
        return string


def parse_commands(inp, markers='$()'):
    """ Parse commands from file, based on markers
        TODO: Multi-line commands
              markers
              parse-delimiters
    """
    mrk = list(markers)
    commands_list = []
    with open(inp, 'r') as handle:
        lines = handle.readlines()

        regex = ''.join(['\\',mrk[0],'\\',mrk[1],'(.*)','\\',mrk[2]])
        # Search for input commands noted by markers
        for line in lines:
            regex_command = re.compile(r''+regex)
            match = re.search(regex_command, line)
            if match:
                commandgroup = match.group(0)
                commands = ''.join([x for x in list(commandgroup) if not (x == mrk[0] or x == mrk[1] or x == mrk[2])]).rsplit(',')
                commands_list.append(commands)
    return commands_list


def cpg(inp, delimiter='.', markers='$()'):
    """Cartesian Product Generator"""
    mrk = list(markers)
    if not path.isfile(inp) :
        errormsg = "File" + inp + "Not found\n Try 'cpg --help'"
        raise IOError(errormsg)

    work = getcwd()
    stub, ext  = path.splitext(inp)
    subdir = path.join(work, stub + '_cpg')

    if not path.exists(subdir): makedirs(subdir)

    commands_list = parse_commands(inp, markers)

    print('Recognized Commands:')
    for i in commands_list:
        print(i)

    cartesianproduct = [x for x in itertools.product(*commands_list)]

    for element in cartesianproduct:
        # Generate File Name
        name = stub
        for i in element:
            name += delimiter + str(i)

        # Remove non-alphanumeric non-period characters from name
        name = ''.join(e for e in name if e.isalnum() or e == delimiter)

        # Prevent overwriting duplicate names
        idx = ''
        i = 0
        pathname = path.join(subdir, name)
        while(path.isfile(pathname+idx+ext)):
            i += 1
            idx = str(i)
        pathname += idx+ext

        print('Created File' , pathname)

        with open(inp, 'r') as handle:
            lines = handle.readlines()

        # Generate output, replace lines with their commands
        # replace_commands(pathname, commands, markers)
        with open(pathname, 'w') as handle:
            j = 0
            regex = ''.join(['\\',mrk[0],'\\',mrk[1],'(.*)','\\',mrk[2]])
            for line in lines:
                regex_command = re.compile(r''+regex)
                match = re.search(regex_command, line)
                if match:
                    newline = line.replace(match.group(0), element[j])
                    j += 1
                    handle.write(newline)
                else:
                    handle.write(line)


if __name__ == '__main__':
    opts = get_arguments()
    cpg(opts.inputfile, delimiter=opts.delimiter, markers=opts.markers)
