#!/usr/bin/env python3

import argparse
import subprocess
import shlex
import webbrowser as wb


def get_arguments(args=None):
    parser = argparse.ArgumentParser(prog = 'ipyr',
                                     usage = '%(prog)s remotemachine [options] ',
                                     description = ''' %(prog)s, or IPython Remote is a simplified wrapper
                                     script for spawning an IPython Notebook on a remote server, and accessing
                                     the Notebook locally through the browser ''',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter
                                     )
    parser.add_argument('server', type=str,  help='Remote Server IP or ssh/config alias to host IPy NB. "local" for this server')
    opts = parser.parse_args(args)
    return opts


def main(opts):
    """
    ipyr
      IPy(thon notebook) R(emote)

    Spawn IPython Notebooks remotely, and then set up port forward
      to access them locally via localhost:6001

    :opts: Command Line Options

    """
    if opts.server == 'local':
        status = spawn_in_background()
    else:
        status = spawn_remotely(opts.server)
    print(status)


def spawn_in_background():
    """
    Local call:
      No argument

          ipyr

          <Check if ipython notebook already running via `ps aux | grep ipython notebook`>
          nohup ipython notebook --no-browser &
          <close connection?>

    """
    psauxCommand = ("ps -aux ")
    grepCommand = ("grep -c 'ipython notebook'")
    p1 = subprocess.Popen(shlex.split(psauxCommand), stdout=subprocess.PIPE)
    p2 = subprocess.Popen(shlex.split(grepCommand), stdin=p1.stdout, stdout=subprocess.PIPE)
    output = p2.communicate()[0]

    status = str(output.split()[0].decode())

    ipython_nb_instances = int(status)

    if ipython_nb_instances <= 1:
        ipythonCommand = ('ipython3 notebook --no-browser')
        subprocess.Popen(shlex.split(ipythonCommand))
        return 0
    else:
        return 1


def spawn_remotely(server):
    """
    Remote call:
      Give remote ssh alias as only arg

          ipyr von

          ssh von 'ipyr'
          ssh -N -f -L localhost:6001:localhost:8888 von
          <open browser to localhost:6001>

    :server: The server to spawn IPython Notebook

    """

    sshCommand = ("ssh " + server + " 'ipyr local'")
    subprocess.Popen(shlex.split(sshCommand))

    sshtunnelCommand = ("ssh -N -f -L localhost:6001:localhost:8888 " + server)

    subprocess.Popen(shlex.split(sshtunnelCommand))

    wb.open('http://localhost:6001')

    return 0


if __name__ == '__main__':
    opts = get_arguments()
    main(opts)
