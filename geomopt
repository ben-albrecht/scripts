#!/usr/bin/env python
"""Script to set up a new geometry optimization resuming from the
   last geometry of a failed geometry optimization Q-Chem job.

   Ideally, this would be outsourced to cclib, but cclib currently
   cannot parse unconverged Q-Chem jobs (TODO)

"""
from __future__ import print_function
from argparse import ArgumentParser
from os import path

class geomopt(object):
    def __init__(self, fname, basis='', jobtype=''):
        """Parses output for inputs and geometries upon instantiation"""
        self.filelength = self._file_len(fname)
        self.idx = 0
        self.atomcoords_list = []
        self.atomelements = []
        self.inputcommands_list = []
        self._parse(fname)
        self.basis = basis
        self.jobtype = jobtype

    def _file_len(self, fname):
        """Most efficient way I know to get a file length in Python"""
        with open(fname) as f:
            for i, l in enumerate(f):
                pass
        return i + 1

    def _parse(self, fname):
        """Parse geometries and inputs out of file"""
        with open(fname, 'r') as self.handle:
            while self.idx < self.filelength:
                line = self._nextline()
                self._parseinput(line)
                self._parsegeometry(line)

    def _parseinput(self, line):
        """Parse inputs based, check for dashes to prevent false positives"""
        if 'User input:' in line:
            dashes = '--------------------------------------------------------------'
            line = self._nextline()
            if dashes in line:
                inputcommands = []
                while True:
                    line = self._nextline()
                    if not dashes in line:
                        inputcommands.append(line)
                    else: break
                self.inputcommands_list.append(inputcommands)

    def _parsegeometry(self, line):
        """Parse geometries, save elements as actual symbol"""
        if 'Standard Nuclear Orientation (Angstroms)' in line:
            line = self._nextline(3)
            atomcoords = []
            atomelements = []
            while list(set(line.strip())) != ['-']:
                entry = line.split()
                atomelements.append(entry[1])
                atomcoords.append(list(map(float, entry[2:])))
                line = self._nextline()
            if not self.atomelements:
                self.atomelements = atomelements

            self.atomcoords_list.append(atomcoords)

    def _nextline(self, num=1):
        """Wrapper for handle.readline, to keep our line number idx"""
        for x in range(num):
            line = self.handle.readline()
            self.idx += 1
        return line

    @property
    def inputstring(self):
        """Return string of input"""
        inpstr = ''
        atom_template = '{:3s} {:15.10f} {:15.10f} {:15.10f}'
        atomcoords = self.atomcoords_list[-1]
        separator = ''
        for inputcommands in self.inputcommands_list:
            i = 0
            inpstr += separator
            while i < len(inputcommands):
                if '$molecule' in inputcommands[i] and not 'read' in inputcommands[i+1]:
                    inpstr += inputcommands[i]
                    inpstr += inputcommands[i+1]
                    for element, (x, y, z) in zip(self.atomelements, atomcoords):
                        inpstr += atom_template.format(element, x, y, z) + '\n'
                    i += len(self.atomelements) + 1
                else:
                    if 'jobtyp' in inputcommands[i] and self.jobtype:
                        inpstr += '    jobtype {0}\n'.format(self.jobtype)
                    elif 'basis' in inputcommands[i] and self.basis:
                        inpstr += '    basis {0}\n'.format(self.basis)
                    else:
                        inpstr += inputcommands[i]
                i += 1
            separator = '\n@@@\n'

        return inpstr

    def printinput(self):
        """Print new Q-Chem input to STDOUT"""
        print(self.inputstring)

    def writeinput(self, inputfilename):
        """Write new Q-Chem input to provided filename"""
        with open(inputfilename, 'w') as finp:
            finp.write(self.inputstring)


def _get_arguments(args=None):
    parser = ArgumentParser(prog='geomopt',
                            usage='geomopt [options] outputfilename',
                            description='Resumes a failed Q-Chem geom-opt calc')

    parser.add_argument('outputfilename', help='Q-Chem outputfile name')
    parser.add_argument('-o', nargs='*', default=-1,
                        help='Write to new inputfile, give no filename for auto indexed naming')

    parser.add_argument('--jobtype', default='', help='New jobtype')
    parser.add_argument('--basis', default='', help='New basis')

    opts = parser.parse_args(args)
    return opts


def _get_integer(s):
    """Check if char is cast-able to integer"""
    try:
        num = int(s)
        return num
    except ValueError:
        return 1


def get_filename(outputfilename):
    """Generate filename, add index if name already present. For example:
       foo.out -> foo.qcm already exists, so return foo1.qcm
       foo1.out -> foo1.qcm already exists, so return foo2.qcm
    """
    stub, ext = path.splitext(outputfilename)
    idx = _get_integer(list(stub)[-1])
    while path.isfile(stub+str(idx)+'.qcm'):
        idx += 1
    fname = stub+str(idx)+'.qcm'
    return fname


if __name__ == '__main__':
    opts = _get_arguments()
    geom = geomopt(opts.outputfilename, basis=opts.basis, jobtype=opts.jobtype)

    # Design Flaw or Feature... User can never use filename '-1'
    if not opts.o == -1:
        if opts.o:
            for fname in opts.o:
                print("Wrote new inputfile to ", fname)
                geom.writeinput(fname)
        else:
            fname = get_filename(opts.outputfilename)
            print("Wrote new inputfile to ", fname)
            geom.writeinput(fname)
    else:
        geom.printinput()

