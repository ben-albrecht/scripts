#!/usr/bin/env python
# encoding: utf-8

"""
This script submits Q-Chem jobs to the queue
Authors: Daniel   Lambrecht (original)
         Benjamin Albrecht (rewritten)


New version requires Python 2.7+ (for argparse)

TODO:
    - Improve optimal queue selection
    - Check Limits per queue
    - Read defaults from ~/.submitrc file

"""
# Python3 compatibility ( must come first! )
from __future__ import print_function

# Quit if incompatible version of Python
import sys
if sys.version_info < (2,7):
    print("Sorry, submit requires Python 2.7+")
    print("If you're on Frank, try:")
    print("module load python/2.7.6-gcc48")
    sys.exit(1)

# Standard library imports
import os, grp, pwd, getpass, argparse
import subprocess
from uuid import uuid4


def get_arguments(args=None):
    """
    Get arguments from user
    """

    ### Default Settings ###
    # Determine default billing account
    # ... first, determine group(s) that the user belongs to
    # ... then pick the first group as the billing account (most likely the PI's # name)
    user = getpass.getuser()
    groups = [g.gr_name for g in grp.getgrall() if user in g.gr_mem]
    gid = pwd.getpwnam(user).pw_gid
    groups.append(grp.getgrgid(gid).gr_name)
    def_account = groups[0] # default billing account

    # Determine default Q-Chem version
    # We first try $QC environment variable, if that is not defined,
    # we assume we are on Frank and we pick the latest version of the Q-Chem trunk
    def_path = os.environ.get('QC')
    if not def_path:
        qchem_dir = '/home/dlambrecht/software'
        all_subdirs = [qchem_dir + "/" + d for d in os.listdir(qchem_dir) if not os.path.isfile(d) and "qchem" in d and "trunk" in d]
        latest_subdir = max(all_subdirs, key=os.path.getmtime)
        def_path = latest_subdir # default version

    # Argparse parsing
    parser = argparse.ArgumentParser(prog='submit',
                                     usage= "%(prog)s job [options] ",
                                     description = ''' %(prog)s is a script that auto-generates a pbs
                                     file and submits a job, utilizing another script, best_queue, which determines
                                     the best queue to submit for minimizing wait times 

                                     A integer type argument''',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter
                                    )


    parser.add_argument('job',        type=str, nargs='+', help='Input File')

    parser.add_argument('--program',  type=str,  default='qchem', help='program to run on input file')
    parser.add_argument('--ppn',      type=int,  default=1, help='number of processors')
    parser.add_argument('--nodes',    type=int,  default=1, help='number of nodes')
    parser.add_argument('--mem',      type=int,  default=-1, help='gb of memory')
    parser.add_argument('--disk',     type=int,  default=-1, help='gb of scratch disk space')
    parser.add_argument('--queue',    type=str,  default='auto', help='queue to submit to, auto for best, aggressive for all')
    parser.add_argument('--walltime', type=str,  default='1:00:00', help='walltime in HH:MM:SS format')
    parser.add_argument('--qos',      type=str,  default='investor', help='priority', choices=['low','investor'])
    parser.add_argument('--account',  type=str,  default=def_account, help='account with Gold on Frank' )
    parser.add_argument('--path',     type=str,  default=def_path, help='path to program')
    parser.add_argument('--save',     type=bool, default=False, help='Save PBS file when True')
    parser.add_argument('--dry',      type=bool, default=False, help='Do not run qsub on PBS file when True')
    parser.add_argument('--investor', type=bool, default=True, help='Add prefix "i" to queue name if you are an investor group')
    parser.add_argument('--email',    type=str,  default='bja39@pitt.edu', help='Email address for job start/finish notifications, set to "off" to turn off')

    opts = parser.parse_args(args)

    return opts

def choosequeue (opts):
    """
    Automatic selection of submission queue
    """
    if opts.queue == "auto":

        settings = ""

        bashCommand = ('best_queue' + settings)
        process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
        status = process.communicate()[0]
        output = str(status).split()
        queue = output[0]
        wait = output[4]

        if "sh:" in status[1]:
            print("Error running best_queue script:")
            print(status)
            sys.exit(1)


        # Signal that we're 'investors' on Frank
        if opts.investor == True:
            if not queue == "test":
                queue = "i" + queue

        print("Best submission queue: ", queue)
        print("Estimated wait time: ", wait)

        return queue

    else:
        return opts.queue


def writepbs(opts, job_name):
    """
    Write submission script
    """

    # Create unique ID for job
    JOB_ID = uuid4().hex # a unique id for the current job
    RUN = "." + job_name + "." + JOB_ID + ".pbs"
    #job_dir = os.path.dirname(os.path.realpath('job_name'+'.in')).split('/')[-1]
    job_dir = os.path.basename(os.path.dirname(os.path.realpath(job_name+'.in')))

    print("run script = ", RUN)

    file = open(RUN, "w")

    file.write("#!/bin/bash\n")
    file.write("\n")
    # TODO: A lot of assumptions going on here, maybe add some args for this (dirname), and refactor
    file.write("#PBS -N " + job_dir + "/" + job_name + "\n")
    file.write("#PBS -l nodes=" + str(opts.nodes) + ":ppn=" + str(opts.ppn) + "\n")
    file.write("#PBS -l walltime=" + opts.walltime + "\n")
    if opts.mem > 0:
        file.write("#PBS -l mem=" + str(opts.mem) + "gb\n")
    if opts.disk > 0:
        file.write("#PBS -l ddisk=" + str(opts.disk) + "gb\n")
    file.write("#PBS -q " + opts.queue + "\n")
    file.write("#PBS -l qos=" + opts.qos + "\n")
    file.write("#PBS -j oe\n")
    #file.write("#PBS -A " + opts.account + "\n")

    if not opts.email == "off":
        file.write("#PBS -m abe\n")
        file.write("#PBS -M " + opts.email + "\n")
    file.write("\n")

    file.write("JOBNAME=" + job_name + "\n")
    file.write("NODES=" + str(opts.nodes) + "\n")
    file.write("PPN=" + str(opts.ppn) + "\n")
    file.write("\n")

    # TODO: if module given or avail -> else load the qcrc
    module="qchem/dlambrecht/4.2-trunk.20141216.omp.release"

    file.write("# Load Q-Chem Modules\n")
    file.write("module purge\n")
    file.write("module load intel/2013.0\n")
    file.write("module load " + module + "\n")
    file.write("\n")

    #file.write("# Load Q-Chem environment variables ...\n")
    #file.write(". " + opts.path + "/qcrc\n")
    #file.write("\n")

    file.write("cd ${PBS_O_WORKDIR}\n")
    file.write("cp ${PBS_O_WORKDIR}/${JOBNAME}.in ${LOCAL}\n")
    file.write("cd ${LOCAL}\n")
    file.write("\n")

    file.write("run_on_exit() {\n")
    file.write("    set -v\n")
    file.write("    rm $LOCAL/pathtable\n")
    file.write("    cp -v -R $LOCAL/* $PBS_O_WORKDIR\n")
    file.write("}\n")
    file.write("\n")

    file.write("trap run_on_exit EXIT\n")
    file.write("\n")


    parallel_string = ""
    if int(opts.nodes) > 1:
        total_cores = str( int(opts.nodes) * int(opts.ppn) )
        parallel_string = "-np " + str(opts.nodes) + " -nt " + str(opts.ppn)
    elif int(opts.ppn) > 1:
        parallel_string = "-nt ${PPN}"

    save_string = ""
    if opts.save == True:
        save_string = " -save "

    #file.write("touch ${JOBNAME}.out\n")
    #file.write("ln ${JOBNAME}.out ${PBS_O_WORKDIR}/${JOBNAME}.out\n")
    file.write("\n")
    file.write("`which qchem` " + parallel_string + save_string + " ${JOBNAME}.in ${PBS_O_WORKDIR}/${JOBNAME}.out ${JOBNAME}." + JOB_ID + "\n")
    file.write("\n")

    if opts.save == True:
        file.write("cp -r ${LOCAL}/* ${PBS_O_WORKDIR}/\n")

    file.write("rm ${PBS_O_WORKDIR}/" + RUN + "\n")

    file.close()

    return RUN



def submit(RUN):
    """ Wrapper function for qsub / Writes QUID file if aggressively submitting

    :RUN: pbs file to run
    """

    bashCommand = ('qsub '+ RUN)
    process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
    status = process.communicate()[0]
    #output = str(status).split()
    #QUID = output[0].split('.')[0]

    #stub, ext = os.path.splitext(RUN)
    #quidfile = stub+'.quid'
    #with open(quidfile, 'w') as handle:
    #    handle.write(QUID)



def main():

    # Get arguments using argparse
    opts = get_arguments()

    # Create job name
    for job in opts.job:
        print(job)
        job_name = job.replace(".in", "")
        job_name = job_name.replace(".n", "")
        print("job name = ", job_name)

        # Choose optimal queue
        opts.queue = choosequeue(opts)

        # Write batch script file
        RUN = writepbs(opts, job_name)

        if opts.dry == False:
            submit(RUN)


if __name__ == '__main__':
    main()
