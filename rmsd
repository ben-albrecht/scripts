#!/usr/bin/env python
# encoding: utf-8
"""Compute RMSD between 2 xyz files"""

import sys

import numpy as np
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter

from qcl import parse, write


def get_arguments(args=None):
    """
    Get arguments from command line
    :args: Arguments, if predefined
    :returns: Opts, the arguments parsed
    """
    parser = ArgumentParser(prog = 'rmsd',
                                     usage = '%(prog)s  xyzfile1 xyzfil2 [options] ',
                                     description = ''' %(prog)s  Compute rmsd between 2 xyzfiles''',
                                     formatter_class=ArgumentDefaultsHelpFormatter
                                     )
    parser.add_argument('xyzfile1', help='xyzfile1')
    parser.add_argument('xyzfile2', help='xyzfile2')
    opts = parser.parse_args(args)
    return opts


def main(xyzfile1, xyzfile2):
    """Main function of script"""
    ccdata1 = parse.xyzfile(xyzfile1)
    ccdata2 = parse.xyzfile(xyzfile2)

    if ccdata1.natom != ccdata2.natom:
        print("Not same number of atoms")
        sys.exit(1)

    translatetoCOM(ccdata1)
    translatetoCOM(ccdata2)

    alignmolecules(ccdata1, ccdata2)

    RMSD(ccdata1, ccdata2)

    printcoords(ccdata1)
    printcoords(ccdata2)


def RMSD(ccdata1, ccdata2):
    """Compute RMSD between two molecules"""
    pass


def translatetoCOM(ccdata):
    """Translate molecule to center-of-mass coordinates"""
    natoms = ccdata.natom
    com = np.zeros(3, dtype=np.float)
    totalmass = 0
    for i in range(natoms):
        com += ccdata.atommasses[i] * ccdata.atomcoords[i]
        totalmass += ccdata.atommasses[i]

    com /= totalmass

    for i in range(natoms):
        ccdata.atomcoords -= com


def alignmolecules(ccdata1, ccdata2):
    """Align two molecules to minimize RMSD"""

    rotationmatrix = _findrotationmatrix(ccdata1, ccdata2)

    for i in range(ccdata2.natom):
        ccdata2.atomcoords[i] = np.transpose(
            np.dot(rotationmatrix, np.transpose(ccdata2.atomcoords[i])))



def _findrotationmatrix(ccdata1, ccdata2):
    """Find rotation matrix that aligns two molecules"""
    natoms = ccdata1.natom
    J = np.zeros((3, 3), dtype=np.float)

    for i in range(natoms):
        J += np.transpose(ccdata1.atomcoords[i]) * ccdata2.atomcoords[i]

    U, s, V = np.linalg.svd(J)

    R = np.transpose(V * np.transpose(U))

    return R


def printcoords(ccdata):
    """Quick print"""
    print(ccdata.natom, '\n')
    atomcoords = ccdata.atomcoords.tolist()
    atomnos = ccdata.atomnos.tolist()

    #atomgeoms = zip(atomnos, atomcoords)
    for i in range(len(atomcoords)):
        atomcoords[i].insert(0, atomnos[i])

    for atom in atomcoords:
        print("%s %10.8f %10.8f %10.8f" % tuple(atom))

if __name__ == '__main__':
    opts = get_arguments()
    main(opts.xyzfile1, opts.xyzfile2)
