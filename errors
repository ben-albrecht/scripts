#!/usr/bin/env python
# encoding: utf-8

from __future__ import print_function

from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter


def get_arguments(args=None):
    """
    Get arguments from command line
    :args: Arguments, if predefined
    :returns: Opts, the arguments parsed
    """
    parser = ArgumentParser(prog='errors',
                            usage='%(prog)s outputs [options] ',
                            description=''' %(prog)s  finds errors in Q-Chem jobs''',
                            formatter_class=ArgumentDefaultsHelpFormatter
                            )
    parser.add_argument('outputs',nargs="+",help='Q-Chem output files')
    parser.add_argument('--filenames', '-n', action='store_true', default=False, help='Print only file names that have failed')

    opts = parser.parse_args(args)
    return opts



def grep(string, outputfile):
    with open(outputfile, 'r') as handle:
        for line in handle.readlines():
            if string in line:
                return True
        return False


def main(outputfiles, printfilenames=False):
    """TODO: Docstring for main.

    :outputs: list of outputfiles
    :returns: TODO

    """
    success = 'Thank you very much'
    errors = {
            'OPTIMIZE fatal error': [],
            'MAXIMUM OPTIMIZATION CYCLES REACHED': [],
            'SCF failed to converge': [],
            'unknown': []
             }

    successes = []

    for outputfile in outputfiles:
        if grep(success, outputfile):
            successes.append(outputfile)

    for outputfile in [opf for opf in outputfiles if opf not in successes]:
        for error in errors.keys():
            if grep(error, outputfile):
                errors[error].append(outputfile)
                break
        else:
            errors['unknown'].append(outputfile)

    if printfilenames:
        for outputfiles in errors.values():
            for outputfile in outputfiles:
                print(outputfile)
    else:
        # Report
        print('total jobs:', len(outputfiles))
        print('successful jobs:', len(successes))
        print('failed jobs:', len(outputfiles) - len(successes))
        print('error report:')
        for error in errors.keys():
            print(error, ':', len(errors[error]))
        print('unknown errors:', len(errors['unknown']))
        for outputfile in errors['unknown']:
            print(outputfile)

    return (successes, errors)



if __name__ == '__main__':
    opts = get_arguments()
    main(opts.outputs, printfilenames=opts.filenames)
